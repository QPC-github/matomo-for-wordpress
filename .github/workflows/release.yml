# Matomo Release Action
# 
# Required GitHub secrets:
# 
# RELEASE_PASSWORD  |  password that needs to be provided to start the action
# GPG_CERTIFICATE  |  ASCII armored or Base64 encoded GPG certificate that is used to create the signatures for the archives
# GPG_CERTIFICATE_PASS  |  Passphrase of the GPG key
# SVN_USERNAME  | the svn username to publish a new plugin release
# SVN_PASSWORD  | the svn password to publish a new plugin release

name: Build release

permissions:
  actions: none
  checks: none
  contents: write  # required to create tag and release
  deployments: none
  issues: none
  packages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: false
        default: ''
      password:
        description: 'Release password'
        required: true

env:
  RELEASE_PASSWORD: ${{ secrets.RELEASE_PASSWORD }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: "Check release password"
        if: ${{ github.event.inputs.password != env.RELEASE_PASSWORD }}
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('Release password didn\'t match.')
      - name: "Check if user is allowed"
        if: ${{ github.actor != 'mattab' && github.actor != 'tsteur' && github.actor != 'mattmary' && github.actor != 'justinvelluppillai' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('User is not allowed to release.')
      - uses: actions/checkout@v3
        with:
          lfs: false
          fetch-depth: '0'
      - name: Import GPG key
        id: import_gpg
        run: |
          echo "${{ secrets.GPG_CERTIFICATE }}" > $HOME/private.asc
          gpg --import --batch --yes $HOME/private.asc
          echo "default-cache-ttl 7200
          max-cache-ttl 31536000
          allow-preset-passphrase" > $HOME/.gnupg/gpg-agent.conf
          keygrip=$(gpg --import --import-options show-only --with-keygrip $HOME/private.asc | grep "Keygrip" | grep -oP "([A-F0-9]+)" | head -1)
          hexPassphrase=$( echo -n '${{ secrets.GPG_CERTIFICATE_PASS }}' | od -A n -t x1 -w100 | sed 's/ *//g' )
          gpg-connect-agent "RELOADAGENT" /bye
          gpg-connect-agent "PRESET_PASSPHRASE ${keygrip} -1 ${hexPassphrase}" /bye
          gpg-connect-agent "KEYINFO ${keygrip}" /bye
      - name: Add git user
        uses: fregante/setup-git-user@v1
      - name: Check preconditions, create tag, build and publish release
        id: tag
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]
          then
            version="${{ github.event.inputs.version }}"
          else
            version=$(cat readme.txt | grep -oP "Stable tag: \K(.+)")
          fi
          echo "Version to build: '$version'"

          echo "Check tag does not exist"
          git fetch --all -q 2>/dev/null
            tag_exists=$( git tag --list "$version" )
            if [[ -n "$tag_exists" ]]
            then
              echo "A tag for $tag_exists already exists."
              exit 1
            fi
          
          echo "Fetching develop"
          git checkout develop && git pull
          
          echo "Patch polyfills"
          wget https://github.com/matomo-org/matomo-for-wordpress/commit/33647ad0268556260f1039a3d14e42258c4f0873.diff
          git apply 33647ad0268556260f1039a3d14e42258c4f0873.diff
          rm 33647ad0268556260f1039a3d14e42258c4f0873.diff
          git add app/vendor/symfony/
          git commit -m 'patch polyfills so we can release a new version and it passes WordPress file check'
          git push origin develop
          
          echo "Fetching live"
          git checkout live && git pull
          
          echo "Merge develop into live"
          git merge develop
          git push origin live
          
          echo "Creating a tag for $version"
          git tag -a $version HEAD -m "If you download this release, make sure the directory name within the 'wordpress/wp-content' directory is 'matomo' and not for example 'matomo-for-wordpress'. [View changes](https://github.com/matomo-org/matomo-for-wordpress/blob/develop/CHANGELOG.md)" 
          git push origin $version
          
          echo "Deploy"
          chmod +x ./scripts/*.sh
          cd scripts
          ./deploy.sh $version ${{ secrets.SVN_USERNAME }} ${{ secrets.SVN_PASSWORD }}
          cd ..
          
          echo ::set-output name=update::false
        shell: bash
